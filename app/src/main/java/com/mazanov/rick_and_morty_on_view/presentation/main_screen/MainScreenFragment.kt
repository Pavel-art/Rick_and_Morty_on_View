package com.mazanov.rick_and_morty_on_view.presentation.main_screenimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.Fragmentimport androidx.fragment.app.viewModelsimport androidx.lifecycle.lifecycleScopeimport androidx.recyclerview.widget.LinearLayoutManagerimport com.mazanov.rick_and_morty_on_view.Rimport com.mazanov.rick_and_morty_on_view.databinding.MainScreenFragmentBindingimport com.mazanov.rick_and_morty_on_view.domain.models.PersonModelimport com.mazanov.rick_and_morty_on_view.presentation.person_screen.PersonFragmentimport dagger.hilt.android.AndroidEntryPointimport kotlinx.coroutines.flow.collectLatestimport kotlinx.coroutines.launch@AndroidEntryPointclass MainScreenFragment : Fragment() {    lateinit var personsAdapter: MainScreenAdapter    private val viewModel by viewModels<MainScreenViewModel>()    private var _binding: MainScreenFragmentBinding? = null    private val binding: MainScreenFragmentBinding        get() = _binding ?: throw RuntimeException("MainScreenFragmentBinding == null")    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)    }    override fun onCreateView(        inflater: LayoutInflater, container: ViewGroup?,        savedInstanceState: Bundle?    ): View {        _binding = MainScreenFragmentBinding.inflate(inflater, container, false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        viewModel.state.observe(viewLifecycleOwner) { state ->            when (state) {                is MainScreenState.Loading -> binding.progressBar.visibility = View.VISIBLE                is MainScreenState.Load -> {                    setupAdapter(state.content)                    binding.progressBar.visibility = View.GONE                }                else -> {}            }        }    }    private fun setupAdapter(list: List<PersonModel>) {        personsAdapter = MainScreenAdapter()        binding.rvMain.layoutManager = LinearLayoutManager(requireContext())        binding.rvMain.adapter = personsAdapter        lifecycleScope.launch {            viewModel.listData.collectLatest {                personsAdapter.submitData(it)            }        }        launchToPersonScreen()    }    private fun launchToPersonScreen() {        personsAdapter.onItemClickListener = {            requireActivity().supportFragmentManager.popBackStack()            requireActivity().supportFragmentManager.beginTransaction()                .replace(R.id.fragment_container_view_tag, PersonFragment.newInstance(it))                .addToBackStack(null)                .commit()        }    }    override fun onDestroy() {        super.onDestroy()        _binding = null    }}